from graph import Graph
import random
from copy import copy

class ColorGraph:
    def __init__(self, V = None, E = []):
        self.d_colors = V or {} 
        self.g = Graph(set(V.keys()) if V else set(), E)
    
    def add_vertex(self, v, color):
        self.d_colors[v] = color
        self.g.add_vertex(v)

    # get's color of node v
    def get_color(self, v):
        return self.d_colors[v]

    def _get_random_color(self):
        COLORS = ["RED", "GREEN", "BLUE", "PURPLE"]

        random.seed()
        return random.choice(COLORS)

    def _swap_colors(self, v1, v2):
        temp = self.get_color(v1)
        self.d_colors[v1] = self.get_color(v2)
        self.d_colors[v2] = temp

    def _can_swap(self, v1, v2):
        if self.g.is_edge((v1,v2)):
            self._swap_colors(v1,v2)
            partitions = self.partition_graph()
            self._swap_colors(v1,v2)

            print(partitions)

            if [x for x in partitions if len(x) >= 3]:
                return True

        return False

    def respective_partitioned_sets(self, v1, v2):
        partg = self.partition_graph()
        setv1 = None
        setv2 = None

        for i in partg:
            for j in i:
                if v1 == j:
                    setv1 = i
                if v2 == j:
                    setv2 = i
        return (setv1, setv2)

    # first check's if it can swap
    # then swaps and deletes accordingly
    # returns a list of nodes deleted and score
    def swap_vertices(self, v1, v2): 
        ocolor1 = self.get_color(v1)
        ocolor2 = self.get_color(v2)
        score = 0
        deleted = []

        self._swap_colors(v1,v2)
        partitions = [x for x in self.partition_graph() if len(x) > 2]

        if not partitions:
            self._swap_colors(v1,v2)

        else:
            while partitions:
                # remove all sets in partition, then run again
                for partition in partitions:
                    score += len(partition)
                    neighbours = [neighbour for x in partition for neighbour in self.g.neighbours(x) if neighbour not in partition]

                    for neighbour1 in neighbours:
                        for neighbour2 in neighbours:
                            if neighbour1 != neighbour2:
                                self.g.add_edge((neighbour1, neighbour2))

                    for element in partition:
                        self.remove_vertex(element)
                        deleted.append(element)

                partitions = [x for x in self.partition_graph() if len(x) > 2]

        return score**2, deleted

    def vertices(self):
        return self.g.vertices()

    def edges(self):
        return self.g.edges()

    def remove_vertex(self, v):
        self.g.remove_vertex(v)

    def neighbours(self, vertex):
        return self.g.neighbours(vertex)

    def partition_graph(self):
        """
        Partitions graph into sets of nodes connected together which have
        the same colour.

        >>> c = ColorGraph({1: "RED", 2: "RED", 3: "RED", 4: "BLUE", 5: "BLUE", 6: "RED", 7: "RED"}, [(1,2), (2,3), (1,4), (3,5), (5,6), (4,7)])
        >>> print(c.partition_graph())
        [{1, 2, 3}, {4}, {5}, {6}, {7}]
        """

        partition = []

        vertex_stack = self.vertices()

        while vertex_stack:
            current_partition = set([vertex_stack.pop()])
            partition_to_add = copy(current_partition)
            while current_partition:
                v = current_partition.pop()
                vertex_stack.discard(v)
                
                for neighbour in self.neighbours(v):
                    if self.get_color(neighbour) == self.get_color(v) and neighbour not in partition_to_add:
                        current_partition.add(neighbour)
                        partition_to_add.add(neighbour)

            partition.append(partition_to_add)

        return partition

    def highlight_twos(self):
        return {x for partition in [x for x in self.partition_graph() if len(x) > 1] for x in partition}

    """def suggest_move(moves_to_look):
        best_score = 0"""
